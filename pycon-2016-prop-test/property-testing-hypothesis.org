#+STARTUP: indent
#+Title: Don't write tests, Generate them!
#+Author: Puneeth Chaganti
#+Email: punchagan@muse-amuse.in

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t ^:{}
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:800 reveal_height:600
#+OPTIONS: toc:nil timestamp:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_MAX_SCALE: 300
#+REVEAL_TRANS: cube
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_PLUGINS: (highlight notes multiplex zoom)

#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
# #+REVEAL_ROOT: reveal.js/


* Introduction
#+BEGIN_QUOTE
- n or SPC -- next slide
- p -- previous slide
- arrow keys skip slides
- ? -- key-binding help
#+END_QUOTE
** Property-based testing, anyone?
** A typical test-suite
#+BEGIN_SRC python
  def test_strip_whitespace_with_no_argument():
      assert strip('  foo ') == 'foo'

  def test_should_strip_whitespace_with_argument():
      assert strip('  foo ', ' ') == 'foo'

  def test_should_strip_non_whitespace():
      assert strip('foo', 'fo') == ''

  ...
#+END_SRC
** Example based tests
- Given :: Setup some *example* data
- When :: Perform actions
- Then :: ~assert output == expected~

** Problems?
- Combinatorial explosion
- Biases carry-over to tests
- Tedious
*** State in a website
[[./state-website.jpg]]
** Enter Generative testing
(Property-based testing)
*** Property-based test, the hard way
#+BEGIN_SRC python
  def test_strip_random():
      for _ in range(200):
          s = random_string()
          strip_chars = random_string()
          S = strip(s, strip_chars)
          assert is_stripped(S, s, strip_chars)

  def is_stripped(S, s, strip_chars):
      assert len(S) <= len(s)
      if len(S) > 0:
          assert S[0] not in set(strip_chars)
          assert S[-1] not in set(strip_chars)
      return True

  random_string = [
      random.choice(string.ascii_letters)
      for _ in range(10)
  ]

#+END_SRC


*** Property based tests
- Given :: For *random* data matching a spec
- When :: Perform actions
- Then :: ~assert property(output)~

* Hypothesis - Property based testing for Python
** Hypothesized test
#+BEGIN_SRC python
  from hypothesis import given, strategies as st

  @given(st.text(), st.text())
  def test_strip_hypothesis(s, strip_chars):
      S = strip(s, strip_chars)
      assert is_stripped(S, s, strip_chars)
  # Ran 1 test in 0.159s
#+END_SRC

*** Failing output
#+BEGIN_SRC python
  strip = lambda x, y: x.lstrip(y)
  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

  output = '01', input_ = '01', strip_chars = '1'

      def is_stripped(output, input_, strip_chars):
          assert len(output) <= len(input_)
          if len(output) > 0:
              assert output[0] not in set(strip_chars)
  >           assert output[-1] not in set(strip_chars)
  E           assert '1' not in {'1'}
  E            +  where {'1'} = set('1')

  test_code.py:113: AssertionError
  ----------------------------------------------------- Hypothesis ------------------------------------------------------
  Falsifying example: test_strip(s='01', strip_chars='1')
#+END_SRC

** Shrinking
- Random data has lots of noise
- Try to find the "simplest" failing case
To learn more, see [[https://github.com/HypothesisWorks/hypothesis-python/blob/7c54198d31a5035a0c2810d8c500308f507b5b11/notebooks/Designing%2520a%2520better%2520simplifier.ipynb][Designing a better simplifier]]

** Data generation
*** Generators for built-ins

#+BEGIN_SRC python
  from hypothesis import strategies as st

  def sample(strategy, n=3):
      return [strategy.example() for _ in range(n)]

  print(sample(st.integers()))
  print(sample(st.floats()))
  print(sample(st.complex_numbers()))
  print(sample(st.text(max_size=3)))
  print(sample(st.lists(st.integers())))
#+END_SRC

#+BEGIN_EXAMPLE
  [-7435755662106, -49, -1295624]
  [-9.266256382731017e+17, -0.19780830243100944, -2.4010523231296193e+61]
  [(-0.99999-0.99999j), (-2.220446049250313e-16+nanj), (0.003554608069336136-1.923176004582495e-275j)]
  ['', '\U000ded7f9', '']
  [[52647858669059, -31758544979, 71365626], [0], []]
#+END_EXAMPLE
*** Extra generators
- Django models
- Numpy arrays
- Dates & times
- Faker generators
*** Composable strategies
#+BEGIN_SRC x
  from hypothesis import strategies as st

  st.recursive?
  st.one_of?
  st.builds?
  st.streaming?

  .map, .filter, .flatmap
#+END_SRC

*** Composing strategies - Example
#+BEGIN_SRC python
  rows = [('John', 'Adams', 90), (...), (...)]
  headers = ['first_name', 'last_name', 'gpa']
  print(tablib.Dataset(*rows, headers=headers))
#+END_SRC

#+BEGIN_SRC markdown
  first_name|last_name |gpa
  ----------|----------|---
  John      |Adams     |90
  George    |Washington|67
  Thomas    |Jefferson |50
#+END_SRC

*** Generate Rows & Header
#+BEGIN_SRC python
  from hypothesis import strategies as st; import string

  n = 3
  alphabet = string.ascii_letters
  generate_row = st.tuples(
      st.text(alphabet, min_size=1),
      st.text(alphabet, min_size=1),
      st.integers(min_value=0, max_value=100)
  )
  generate_table = st.lists(generate_row, min_size=3, max_size=3)
  generate_headers = st.lists(
      st.text(alphabet, min_size=1),
      unique=True,
      min_size=n,
      max_size=n
  )
#+END_SRC
*** Putting it together
#+BEGIN_SRC python
  def create_dataset(rows, headers):
      return tablib.Dataset(*rows, headers=headers)

  def generate_dataset():
      return st.builds(create_dataset, generate_data, headers=generate_headers)

  print(generate_dataset().example())
#+END_SRC

#+BEGIN_SRC x
  znefubbdv     |wpclcf|ouc
  --------------|------|---
  aecpjxzwfqosmu|krlmfh|55
  htq           |jid   |87
  lwbfboxyifre  |oqdha |83
#+END_SRC


** Simple ~tablib~ test
#+BEGIN_SRC python
  def test_add_column():
      rows = [['kenneth'], ['bessie']]
      data = tablib.Dataset(*rows, headers=['fname'])
      new_col = ['reitz', 'monke']
      data.append_col(new_col, header='lname')

      assert data[0] == ('kenneth', 'reitz'))
      assert data.width == 2
#+END_SRC
*** to a property based test
#+BEGIN_SRC python
  @given(data=generate_dataset(),
         new_col=st.lists(st.text(min_size=1), min_size=3, max_size=3),
         header=st.text(min_size=3))
  def test_hyp_add_column(data, new_col, header):
      first_row = data[0]
      data.append_col(new_col, header=header)

      assert data[0] == first_row + (new_col[0],)
      assert data.width == 4
#+END_SRC
*** Test transpose
#+BEGIN_SRC python
  @given(generate_dataset())
  def test_transpose(self, data):
      data_ = data.transpose()

      self.assertEqual(data.width, data_.height+1)
      self.assertEqual(data.height, data_.width-1)
#+END_SRC
*** Round trip transpose
#+BEGIN_SRC python
  @given(generate_dataset())
  def test_two_transposes(self, data):
      data_ = data.transpose().transpose()

      self.assertEqual(data.width, data_.width)
      self.assertEqual(data.height, data_.height)
#+END_SRC

#+BEGIN_SRC traceback
    self.assertEqual(data.width, data_.height)
E   AssertionError: 3 != 2
------------------------------------------------ Captured stdout call -------------------------------------------------
Falsifying example:
a|b|c
-|-|-
a|a|0
a|a|0
a|a|0
#+END_SRC
*** Round trip to json
#+BEGIN_SRC python
  @given(generate_dataset())
  def test_json_export_import_works(data):
      json_ = data.json
      data_ = tablib.import_set(json_)

      self.assertEqual(data.width, data_.width)
      self.assertEqual(data.height, data_.height)
      self.assertEqual(data[0], data_[0]))
#+END_SRC

#+BEGIN_SRC traceback
      self.assertEqual(data[0], data_[0])
  E   AssertionError: Tuples differ: ('a', 'a', 0) != ('a', 0, 'a')
#+END_SRC
**** COMMENT dateutil bug

[[https://www.youtube.com/watch?v=jvwfDdgg93E][Matt Bacchman]] talks about a dateutil bug in his talk

#+BEGIN_SRC python
  import datetime
  import dateutil

  datetime(99, 1, 1, 0, 0).isoformat()   # '0099-01-01T00:00:00'
  dateutil.parse('0099-01-01T00:00:00')  # datetime.datetime(1999, 1, 1, 0, 0)
#+END_SRC


** Verification
~strip~ tests from before

Sorting actually returns a sorted list


*** Computing the mean
#+BEGIN_SRC python
  from hypothesis import given, strategies as st

  @given(st.lists(st.floats(allow_nan=False, allow_infinity=False)), min_size=1)
  def test_mean_is_within_reasonable_bounds(ls):
      assert min(ls) <= mean(ls) <= max(ls)
#+END_SRC


*** Going by definition ...

#+BEGIN_SRC python
  def mean(xs):
      return sum(xs) / len(xs)
#+END_SRC

#+BEGIN_EXAMPLE
  ls = [8.988465674311579e+307, 8.98846567431158e+307]

      @given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))
      def test_mean_is_within_reasonable_bounds(ls):
  >       assert min(ls) <= mean(ls) <= max(ls)
  E       assert inf <= 8.98846567431158e+307
  E        +  where inf = mean([8.988465674311579e+307, 8.98846567431158e+307])
  E        +  and   8.98846567431158e+307 = max([8.988465674311579e+307, 8.98846567431158e+307])

#+END_EXAMPLE


*** Avoiding overflow
#+BEGIN_SRC python
  def mean(xs):
      n = len(xs)
      return sum(x / n  for x in xs)
#+END_SRC

#+BEGIN_EXAMPLE
  ls = [1.390671161567e-309, 1.390671161567e-309, 1.390671161567e-309]

      @given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))
      def test_mean_is_within_reasonable_bounds(ls):
  >       assert min(ls) <= mean(ls) <= max(ls)
  E       assert 1.390671161567e-309 <= 1.390671161566996e-309
  E        +  where 1.390671161567e-309 = min([1.390671161567e-309, 1.390671161567e-309, 1.390671161567e-309])
  E        +  and   1.390671161566996e-309 = mean([1.390671161567e-309, 1.390671161567e-309, 1.390671161567e-309])
#+END_EXAMPLE


*** For instance, ~numpy~
#+BEGIN_SRC python
  import numpy as np
  def mean(xs):
      return np.array(xs).mean()
#+END_SRC

#+BEGIN_EXAMPLE
  ls = [8.988465674311579e+307, 8.98846567431158e+307]

      @given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))
      def test_mean_is_within_reasonable_bounds(ls):
  >       assert min(ls) <= mean(ls) <= max(ls)
  E       assert inf <= 8.98846567431158e+307
  E        +  where inf = mean([8.988465674311579e+307, 8.98846567431158e+307])
  E        +  and   8.98846567431158e+307 = max([8.988465674311579e+307, 8.98846567431158e+307])
#+END_EXAMPLE

Read this [[https://hal.archives-ouvertes.fr/file/index/docid/576641/filename/computing-midpoint.pdf][30 page paper]], to see how to do it right!

** Test Oracle
#+BEGIN_SRC python
  from hypothesis import strategies as st, given
  from my_lib import my_sort

  @given(st.lists(st.integers()))
  def test_my_sort(xs):
      assert sorted(xs) == my_sort(xs)
#+END_SRC


** More patterns
See talk by [[http://pyvideo.org/pycon-za-2015/property-based-testing-with-hypothesis.html][Jeremy Thurgood]]
- Induction
- Transformation
- Invariance
- Idempotence
** Keep in mind
- Fast data generation
- Fast assertions
- Simple looking, yet powerful
- Re-use?

* Stateful testing

#+BEGIN_SRC python
  def test_website():
      assert login(credentials)
      assert go_to_homepage()
      assert follow_friend()
      assert logout()
#+END_SRC


** Pseudocode example
#+BEGIN_SRC python
  class WebSiteStateMachine(RuleBasedStateMachine):
      def __init__(self):
          super(WebSiteStateMachine, self).__init__()

      def login(self):
          """Login using credentials and assert success."""

      @rule()
      def logout(self):
          """Logout and assert it worksn."""

      @rule(user=st.sampled_from(USERS))
      def follow_user(self, user):
          """Assert that following a user works."""

  WebSiteTestCase = WebSiteStateMachine.TestCase
#+END_SRC

* Problems with Generative Testing?
- Performance
- Debugging CI failures
- Rare branches?
* Conclusion
** Property based tests
- Concise
- Overcome developer biases
- Assert general things
** Hypothesis
- Generate data, given a requirement
- Check that a *property* holds true
- Shrink failed cases to simplest case
** Some interesting case studies
- [[https://vimeo.com/68383317][John Hughes]]: Testing the hard stuff and staying sane
- [[https://www.youtube.com/watch?v=HXGpBrmR70U][Ashton Kemerling]]: Generative Integration Testing
- [[https://www.youtube.com/watch?v=Yp7MmskzF9Y][Sean Grove]]: Generating and Running 1M tests
** Pairing anyone?
** Thank you

@punchagan

http://tinyurl.com/pygentest

* COMMENT References

- http://basho.com/posts/technical/quickchecking-poolboy-for-fun-and-profit/
- http://www.fastcompany.com/28121/they-write-right-stuff
- http://hypothesis.works/articles/anatomy-of-a-test/
- http://fsharpforfunandprofit.com/pbt/
- http://book.realworldhaskell.org/read/testing-and-quality-assurance.html
- http://qala.io/blog/randomized-testing.html
- http://www.cse.chalmers.se/edu/year/2012/course/DIT848/files/13-GL-QuickCheck.pdf
- http://danluu.com/testing/
- http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf
- https://hypothesis.readthedocs.io/en/latest/details.html
- http://www.sqlite.org/testing.html#fuzztesting
- http://cs-syd.eu/posts/2016-02-28-testing-the-super-user-spark-with-hspec.html
- http://www.slideshare.net/ScottWlaschin/an-introduction-to-property-based-testing
- https://www.pluralsight.com/courses/fsharp-property-based-testing-introduction
- http://research.microsoft.com/en-us/projects/pex/patterns.pdf
- [X] http://developers.redhat.com/blog/2016/06/24/the-hypothesis-testing-library-for-python-an-introduction/
- [X] [[https://www.youtube.com/watch?v=hNhHmbiw4Rw][Property Based Testing: Shrinking Risk In Your Code]]
- [X] [[https://www.youtube.com/watch?v=mg5BeeYGjY0][Property based testing with Hypothesis (PyCon ZA)]]
- [X] http://fsharpforfunandprofit.com/posts/property-based-testing-2/
- [X] http://hypothesis.works/articles/rule-based-stateful-testing/
- [X] http://goo.gl/g0mGgU
- [X] [[https://vimeo.com/68383317][John Hughes: Race Conditions, Distribution, Interactions--Testing the Hard Stuff and Staying Sane]]
- [X] [[https://www.youtube.com/watch?v=shngiiBfD80][Jessica Kerr: Property-based Testing for Better Code]]

* COMMENT Notes
- monotonous
- intro to recommendations
- ask more questions
- too much content
- speak slowly
- canvas size
- fix screen projection
- be slower with examples
- make interactive
